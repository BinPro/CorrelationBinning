Timer unit: 1e-06 s

File: probin/binning/em.py
Function: cluster at line 9
Total time: 104.815 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           @profile
    10                                           def cluster(contigs, model ,cluster_count,centroids=None,max_iter=100, repeat=10,epsilon=1E-7):
    11         1            5      5.0      0.0      (max_clusters, max_clustering_prob,max_centroids) = (None, -np.inf, None)
    12        11           72      6.5      0.0      params = [(contigs, model.log_probability_func, model.fit_nonzero_parameters_func, cluster_count ,np.copy(centroids), max_iter,epsilon) for _ in xrange(repeat)]
    13                                               #pool = Pool(processes=cpu_count())
    14                                               #results = pool.map(_clustering_wrapper, params)
    15                                               #pool.close()
    16        11    104815131 9528648.3    100.0      results = [_clustering_wrapper(param) for param in params]
    17                                                   
    18         1           11     11.0      0.0      return max(results,key=lambda x: x[1])

File: probin/binning/em.py
Function: _clustering at line 23
Total time: 104.794 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                           @profile
    24                                           def _clustering(contigs, log_probability_func,fit_nonzero_parameters_func, cluster_count ,p , max_iter, epsilon):
    25        10          317     31.7      0.0      if not np.any(p):    
    26        10     40470073 4047007.3     38.6          clustering,_, p = kmeans._clustering(contigs, log_probability_func, fit_nonzero_parameters_func, cluster_count ,p, max_iter=3,epsilon=epsilon)
    27        80          633      7.9      0.0          n = np.array([len(cluster) for cluster in clustering])
    28        10      4213275 421327.5      4.0          exp_log_qs, max_log_qs = _get_exp_log_qs(contigs,log_probability_func,p)
    29        10          903     90.3      0.0          z = _expectation(contigs,log_probability_func,n,exp_log_qs)
    30        10      4462313 446231.3      4.3          prev_prob,_,_ = _evaluate_clustering(contigs, log_probability_func, p, z)
    31                                           
    32                                               else:
    33                                                   print >> sys.stderr, "Not implemented for EM to start with fixed p (centroids)"
    34                                                   sys.exit(-1)
    35                                                   
    36        10           27      2.7      0.0      prob_diff = np.inf
    37        10           27      2.7      0.0      prev_prob = -np.inf
    38        10           17      1.7      0.0      iteration = 0
    39                                               
    40        85          673      7.9      0.0      while(max_iter - iteration > 0 and prob_diff > epsilon):
    41        75         9468    126.2      0.0          z = _expectation(contigs,log_probability_func,n,exp_log_qs)
    42        75      9901582 132021.1      9.4          p = _maximization(contigs,fit_nonzero_parameters_func,z)        
    43        75     45704245 609389.9     43.6          curr_prob, exp_log_qs, max_log_qs = _evaluate_clustering(contigs,log_probability_func,p,z)        
    44        75         2891     38.5      0.0          n = np.sum(z,axis=0,keepdims=True)
    45                                                   
    46                                                   
    47        75          435      5.8      0.0          prob_diff = curr_prob - prev_prob
    48        75          186      2.5      0.0          (curr_prob,prev_prob) = (prev_prob,curr_prob)
    49        75          214      2.9      0.0          iteration += 1
    50                                               
    51                                               #Change back so curr_prob represents the highest probability
    52        10           32      3.2      0.0      (curr_prob,prev_prob) = (prev_prob,curr_prob)
    53        10          537     53.7      0.0      print >> sys.stderr, "EM iterations: {0}".format(iteration)
    54        10           76      7.6      0.0      if prob_diff < 0:
    55        10          441     44.1      0.0          print >> sys.stderr, "EM got worse, diff: {0}".format(prob_diff)
    56        80          466      5.8      0.0      clustering = [set() for _ in xrange(len(p))]
    57        10          300     30.0      0.0      which_cluster = np.argmax(z,axis=1)
    58      3000         9470      3.2      0.0      for (contig,which) in izip(contigs,which_cluster):
    59      2990        15020      5.0      0.0          clustering[which].add(contig)
    60        10           27      2.7      0.0      return (clustering, curr_prob, p)

File: probin/binning/em.py
Function: _expectation at line 62
Total time: 0.008793 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           @profile
    63                                           def _expectation(contigs, log_probability_func, n, exp_log_qs):
    64                                               """
    65                                               Usage: _expectation(contigs,log_probability_func, p, n, exp_log_qs, max_log_qs)
    66                                               Return: The responsibility matrix for currenct p and n
    67                                               
    68                                               We are calculating the expression <z_{i,k}> = Q(theta_i|p_k)n_k / sum_{l=1}^K(Q(theta_i|p_l)*n_l)
    69                                                   where theta is the feature vector of contig_i, p_k is the feature vector of centroid_k and n_k is the expected number
    70                                                   of contigs in cluster k.
    71                                                   
    72                                                   the calculation of <z_{i,k}> can be expressed as:
    73                                                   
    74                                                   exp(log(Q(theta_i|p_k) - log(Q(theta_i|p_kmax))))*n_k / sum_{l=1}^K(exp(log(Q(theta_i|p_l))-log(Q(theta_i|p_max)))*n_l)
    75                                                   
    76                                                   We see that we get the exp_log_qs=exp(log(Q(theta_i|p_k))-log(Q(theta_i|p_max)) for all i and l and k 
    77                                                   and the max_log_qs = log(Q(theta_i|p_max) for all i for free from 
    78                                                   _evaluation_clustering from the previous iteration.
    79                                               """
    80                                               
    81        85         2236     26.3     25.4      exp_log_qs *= n
    82        85         6557     77.1     74.6      return exp_log_qs / np.sum(exp_log_qs,axis=1,keepdims=True)

File: probin/binning/em.py
Function: _maximization at line 84
Total time: 9.89975 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    84                                           @profile
    85                                           def _maximization(contigs, fit_nonzero_parameters_func, z):
    86                                               """
    87                                               Usage: _maximization(contigs, fit_nonzero_parameters_func, p, z)
    88                                               Return: The new centroids that maximize the probability for the current z values.
    89                                               
    90                                               We are calculating the expression p_{k,j} = sum_i(<z_{i,k}>*theta_{i,j}) / sum_j( sum_i(<z_{i,k}>*theta_{i,j}))
    91                                               
    92                                               """
    93        75      9899748 131996.6    100.0      return fit_nonzero_parameters_func(contigs,expected_clustering=z.T)

File: probin/binning/em.py
Function: _evaluate_clustering at line 96
Total time: 50.1644 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    96                                           @profile
    97                                           def _evaluate_clustering(contigs, log_probability_func, p, z):
    98                                               """
    99                                               Usage:  _evaluate_clustering(contigs,log_probability_func, p, z)
   100                                               Return: (clustering_prob, exp_log_qs, max_log_qs)
   101                                               
   102                                               calculate log L(theta|z,p) or log L(contigs| expected_clustering_freq,centroids)
   103                                               = sum_{i=1}^{N} (log (sum_{k=1}^{K} (<z_{i,k}>*Q(theta_{i}|p_{k}) ) ) )
   104                                               which translates into:
   105                                               sum_{i=1}^{N}( log( Q(theta_{i}|p_{kmax}) ) + log( sum_{k=1}^{K}( <z_{i,k}>*exp(log( Q(theta_{i}|p_{k}) ) - log(Q(theta_{i}|p_{kmax}) ) ) ) ) )    
   106                                               
   107                                               N is the number of contigs, K is the number of clusters.
   108                                               
   109                                               clustering_prob is the evaluation of the current clustering
   110                                               log_qs is an NxK matrix of all log (Q(theta_i|p_k)) values.
   111                                               max_log_qs is an Nx1 matrix where each row contains the max value over corresponding row in log_qs
   112                                           
   113                                               exp_log_qs and max_log_qs are used in the next iteration in _evaluation.     
   114                                               """
   115        85     50156961 590081.9    100.0      exp_log_qs, max_log_qs = _get_exp_log_qs(contigs,log_probability_func,p)
   116                                           
   117        85         7270     85.5      0.0      clustering_prob = np.sum(max_log_qs + np.log(np.sum(z*exp_log_qs)))
   118        85          179      2.1      0.0      return clustering_prob, exp_log_qs, max_log_qs

File: probin/binning/em.py
Function: _get_exp_log_qs at line 120
Total time: 53.8032 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   120                                           @profile    
   121                                           def _get_exp_log_qs(contigs,log_probability_func,p):
   122        95         1153     12.1      0.0      log_qs = np.zeros((len(contigs),len(p)))
   123     28500        66163      2.3      0.1      for i,contig in enumerate(contigs):
   124    227240     53720397    236.4     99.8          log_qs[i] = np.array([log_probability_func(contig,centroid) for centroid in p])
   125        95         4983     52.5      0.0      max_log_qs = np.max(log_qs,axis=1,keepdims=True)
   126        95        10341    108.9      0.0      exp_log_qs = np.exp(log_qs - max_log_qs)
   127        95          212      2.2      0.0      return exp_log_qs, max_log_qs

