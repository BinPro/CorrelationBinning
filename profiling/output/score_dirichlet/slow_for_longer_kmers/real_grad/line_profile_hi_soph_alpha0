Timer unit: 1e-06 s

File: ./score_dirichlet_one_call.py
Function: main at line 16
Total time: 3.9748 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def main(contigs_file,taxonomy_file, dir_path, kmer_length, contig_length):
    18                                           
    19         1            5      5.0      0.0      groups = []
    20         1          233    233.0      0.0      DNA.generate_kmer_hash(kmer_length)
    21                                           
    22         1        28127  28127.0      0.7      contigs = read_contigs_file(contigs_file,start_position=True)
    23                                               
    24                                               # Divide genomes into groups, one for each genus
    25         1           37     37.0      0.0      meta_genomes = genome_info_from_parsed_taxonomy_file(taxonomy_file)
    26                                           
    27                                               # Fetch sequence for each genome
    28         1        78002  78002.0      2.0      genomes = read_FASTA_files_no_groups(meta_genomes, dir_path)
    29                                           
    30         1            4      4.0      0.0      genome_part_l = 10000
    31         2            6      3.0      0.0      for genome in genomes:
    32         1      1679230 1679230.0     42.2          genome.calculate_signature()
    33         1        10223  10223.0      0.3          genome.parts = genome.split_seq(genome_part_l)
    34       133          407      3.1      0.0          for part in genome.parts:
    35       132      1714398  12987.9     43.1              part.calculate_signature()
    36         1            5      5.0      0.0          alpha_fit =  model.fit_nonzero_parameters_full_output(\
    37         1        71083  71083.0      1.8              genome.parts)
    38         1         5027   5027.0      0.1          sys.stderr.write(str(alpha_fit)+'\n')
    39         1            4      4.0      0.0          genome.pseudo_par = alpha_fit[0]
    40                                           
    41         1            2      2.0      0.0      scores = []
    42        30           75      2.5      0.0      for contig in contigs:
    43        29       377818  13028.2      9.5          contig.calculate_signature()
    44        58          170      2.9      0.0          for genome in genomes:
    45        29           88      3.0      0.0              p_val = model.log_probability(\
    46        29         8927    307.8      0.2                  contig, genome.pseudo_par)
    47        29           86      3.0      0.0              scores.append(\
    48        29          392     13.5      0.0                  Score(p_val, contig, genome, contig.contig_id))
    49                                           
    50         1           31     31.0      0.0      sys.stdout.write("p_value\tcontig_family\tcontig_genus\tcontig_species\tcontig_genome\tcompare_family\tcompare_genus\tcompare_species\tcompare_genome\tcontig_id" + os.linesep)
    51        30           74      2.5      0.0      for score in scores:
    52        29          347     12.0      0.0          sys.stdout.write(str(score) + '\n')

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: fit_nonzero_parameters at line 8
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           @profile
     9                                           def fit_nonzero_parameters(dna_l):
    10                                               return np.array(fit_nonzero_parameters_full_output(dna_l)[0])

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: fit_nonzero_parameters_full_output at line 11
Total time: 0.071035 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def fit_nonzero_parameters_full_output(dna_l):
    13         1            3      3.0      0.0      kmer_hash_count = dna_l[0].kmer_hash_count
    14         1        15127  15127.0     21.3      alpha0, pcs = _all_pseudo_counts(dna_l,kmer_hash_count)
    15                                               # K is the number of sequences in the cluster
    16         1            9      9.0      0.0      K,_ = np.shape(pcs)
    17                                               # Total number of kmers for each contig
    18         1           27     27.0      0.0      M = np.sum(pcs,axis=1)
    19         1         2649   2649.0      3.7      sys.stderr.write("alpha0: " + str(alpha0) + '\n')
    20         1            5      5.0      0.0      alpha_bounds = [(0.0,None)]*kmer_hash_count
    21         1        53212  53212.0     74.9      alpha_fit = fmin_l_bfgs_b(neg_log_probability_l,alpha0,fprime=neg_log_probability_l_gradient,args=(pcs,K,M),bounds=alpha_bounds,factr=10.0)
    22         1            3      3.0      0.0      return alpha_fit

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: sophisticated_alpha0 at line 23
Total time: 0.004639 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                           @profile
    24                                           def sophisticated_alpha0(pcs,kmer_hash_count):
    25                                               """Estimating the alpha parameters according to a equation given in Minka2012"""
    26        33         1064     32.2     22.9      pcs_norm = np.array([pcs[i,:]/float(np.sum(pcs[i,:])) for i in xrange(kmer_hash_count)])
    27         1           85     85.0      1.8      p_expected = np.mean(pcs_norm, axis=0)
    28         1         3230   3230.0     69.6      sys.stderr.write("p_expected: " + str(p_expected)+'\n')
    29         1          149    149.0      3.2      p_var = np.var(pcs_norm, axis=0)
    30                                               # The sum of the alphas correspond to the precision of the dirichlet, and is therefore 
    31                                               # what makes a difference between the multinomial and the dirichlet-multinomial.
    32         1           67     67.0      1.4      log_alpha_sum = (1/float(kmer_hash_count-1))*(np.sum(np.log(p_expected*(1-p_expected)/p_var -1))-np.log(p_expected[-1]*(1-p_expected[-1])/p_var[-1] - 1))
    33         1           44     44.0      0.9      return np.sum(pcs,axis=0)/np.exp(log_alpha_sum)

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: neg_log_probability_l_gradient at line 35
Total time: 0.022608 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    35                                           @profile
    36                                           def neg_log_probability_l_gradient(alpha,pcs,K,M):
    37        50          823     16.5      3.6      A = np.sum(alpha)
    38        50        21785    435.7     96.4      return -(K*psi(A) - np.sum(psi(A+M)) - K*psi(alpha) + np.sum(psi(pcs+alpha),axis=0))

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: neg_log_probability_l at line 40
Total time: 0.028404 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    40                                           @profile
    41                                           def neg_log_probability_l(alpha,pcs,K,M):
    42        79         1533     19.4      5.4      A = np.sum(alpha)
    43                                               return -(K*gammaln(A) - 
    44        79         3362     42.6     11.8               np.sum(gammaln(A + M)) + 
    45        79        23509    297.6     82.8               np.sum(np.sum(gammaln(pcs+alpha),axis=0) - K*gammaln(alpha)))

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: _all_pseudo_counts at line 46
Total time: 0.014581 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    46                                           @profile
    47                                           def _all_pseudo_counts(dna_l, kmer_hash_count):
    48         1           32     32.0      0.2      pcs = np.zeros((len(dna_l),kmer_hash_count))
    49       133          293      2.2      2.0      for index,seq in enumerate(dna_l):
    50       132         9498     72.0     65.1          pcs[index,:] = np.fromiter(seq.pseudo_counts, np.dtype('u4'), count=kmer_hash_count)
    51         1         4756   4756.0     32.6      alpha_0 = sophisticated_alpha0(pcs,kmer_hash_count)
    52                                               # np.sum(pcs,axis=0)
    53         1            2      2.0      0.0      return alpha_0,pcs

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: log_probability at line 54
Total time: 0.008206 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    54                                           @profile
    55                                           def log_probability(seq,alpha):
    56        29          172      5.9      2.1      N = np.shape(alpha)[0]
    57        29         2359     81.3     28.7      pc_arr = np.fromiter(seq.pseudo_counts,np.dtype('u4'),count=N)
    58        29          204      7.0      2.5      pc_mat = pc_arr.reshape((1,N))
    59                                               # K is the number of sequences in the cluster
    60        29          125      4.3      1.5      K,_ = np.shape(pc_mat)
    61                                               # Total number of kmers for each contig
    62        29         1020     35.2     12.4      M = np.sum(pc_mat,axis=1)
    63        29         4326    149.2     52.7      return - neg_log_probability_l(alpha,pc_mat,K,M)

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: log_probability_test at line 64
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    64                                           @profile
    65                                           def log_probability_test(pseudo_counts,alpha):
    66                                               # pseudo_counts given directly mainly for testing purposes
    67                                               pcs = np.zeros((1,len(pseudo_counts)))
    68                                               pcs[0,:] = np.array(pseudo_counts)
    69                                               return - neg_log_probability_l(alpha,pcs)

