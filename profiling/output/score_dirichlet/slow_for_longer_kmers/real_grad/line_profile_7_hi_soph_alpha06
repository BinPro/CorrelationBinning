Timer unit: 1e-06 s

File: ./score_dirichlet_one_call.py
Function: main at line 16
Total time: 22.6467 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def main(contigs_file,taxonomy_file, dir_path, kmer_length, contig_length):
    18                                           
    19         1            5      5.0      0.0      groups = []
    20         1        75854  75854.0      0.3      DNA.generate_kmer_hash(kmer_length)
    21                                           
    22         1        28012  28012.0      0.1      contigs = read_contigs_file(contigs_file,start_position=True)
    23                                               
    24                                               # Divide genomes into groups, one for each genus
    25         1           39     39.0      0.0      meta_genomes = genome_info_from_parsed_taxonomy_file(taxonomy_file)
    26                                           
    27                                               # Fetch sequence for each genome
    28         1        76636  76636.0      0.3      genomes = read_FASTA_files_no_groups(meta_genomes, dir_path)
    29                                           
    30         1            3      3.0      0.0      genome_part_l = 10000
    31         2            6      3.0      0.0      for genome in genomes:
    32         1      2051754 2051754.0      9.1          genome.calculate_signature()
    33         1         9743   9743.0      0.0          genome.parts = genome.split_seq(genome_part_l)
    34       133          569      4.3      0.0          for part in genome.parts:
    35       132      3867183  29296.8     17.1              part.calculate_signature()
    36         1            5      5.0      0.0          alpha_fit =  model.fit_nonzero_parameters_full_output(\
    37         1     15141616 15141616.0     66.9              genome.parts)
    38         1         2049   2049.0      0.0          sys.stderr.write(str(alpha_fit)+'\n')
    39         1            5      5.0      0.0          genome.pseudo_par = alpha_fit[0]
    40                                           
    41         1            3      3.0      0.0      scores = []
    42        30           81      2.7      0.0      for contig in contigs:
    43        29       884640  30504.8      3.9          contig.calculate_signature()
    44        29       459616  15848.8      2.0          contig.pseudo_counts_array = np.fromiter(contig.pseudo_counts,np.dtype('u4'),DNA.kmer_hash_count).reshape((1,DNA.kmer_hash_count))
    45        58          223      3.8      0.0          for genome in genomes:
    46        29           97      3.3      0.0              p_val = model.log_probability(\
    47        29        47521   1638.7      0.2                  contig, genome.pseudo_par, pseudo_counts_supplied=True)
    48        29           94      3.2      0.0              scores.append(\
    49        29          525     18.1      0.0                  Score(p_val, contig, genome, contig.contig_id))
    50                                           
    51         1           31     31.0      0.0      sys.stdout.write("p_value\tcontig_family\tcontig_genus\tcontig_species\tcontig_genome\tcompare_family\tcompare_genus\tcompare_species\tcompare_genome\tcontig_id" + os.linesep)
    52        30           75      2.5      0.0      for score in scores:
    53        29          363     12.5      0.0          sys.stdout.write(str(score) + '\n')

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: fit_nonzero_parameters at line 8
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           @profile
     9                                           def fit_nonzero_parameters(dna_l):
    10                                               return np.array(fit_nonzero_parameters_full_output(dna_l)[0])

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: fit_nonzero_parameters_full_output at line 11
Total time: 15.1409 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def fit_nonzero_parameters_full_output(dna_l):
    13         1            4      4.0      0.0      kmer_hash_count = dna_l[0].kmer_hash_count
    14         1      2233852 2233852.0     14.8      alpha0, pcs = _all_pseudo_counts(dna_l,kmer_hash_count)
    15                                               # K is the number of sequences in the cluster
    16         1           11     11.0      0.0      K,_ = np.shape(pcs)
    17                                               # Total number of kmers for each contig
    18         1         1820   1820.0      0.0      M = np.sum(pcs,axis=1)
    19         1         1325   1325.0      0.0      sys.stderr.write("alpha0: " + str(alpha0) + '\n')
    20         1           40     40.0      0.0      alpha_bounds = [(0.0,None)]*kmer_hash_count
    21         1     12903822 12903822.0     85.2      alpha_fit = fmin_l_bfgs_b(neg_log_probability_l,alpha0,fprime=neg_log_probability_l_gradient,args=(pcs,K,M),bounds=alpha_bounds,factr=10.0)
    22         1            3      3.0      0.0      return alpha_fit

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: sophisticated_alpha0 at line 23
Total time: 0.03633 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                           @profile
    24                                           def sophisticated_alpha0(pcs,kmer_hash_count):
    25                                               """Estimating the alpha parameters according to a equation given in Minka2012"""
    26         1         1977   1977.0      5.4      norms = np.sum(pcs,axis=1)
    27         1        13679  13679.0     37.7      pcs_norm = pcs / norms.reshape(-1,1)
    28         1         2149   2149.0      5.9      p_expected = np.mean(pcs_norm, axis=0)
    29         1        15547  15547.0     42.8      p_var = np.var(pcs_norm, axis=0)
    30                                               # The sum of the alphas correspond to the precision of the dirichlet, and is therefore 
    31                                               # what makes a difference between the multinomial and the dirichlet-multinomial.
    32         1          742    742.0      2.0      log_alpha_sum = (1/float(kmer_hash_count-1))*(np.sum(np.log(p_expected*(1-p_expected)/p_var -1))-np.log(p_expected[-1]*(1-p_expected[-1])/p_var[-1] - 1))
    33         1         2236   2236.0      6.2      return np.sum(pcs,axis=0)/np.exp(log_alpha_sum)

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: neg_log_probability_l_gradient at line 35
Total time: 6.69224 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    35                                           @profile
    36                                           def neg_log_probability_l_gradient(alpha,pcs,K,M):
    37        54         1609     29.8      0.0      A = np.sum(alpha)
    38        54      6690632 123900.6    100.0      return -(K*psi(A) - np.sum(psi(A+M)) - K*psi(alpha) + np.sum(psi(pcs+alpha),axis=0))

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: neg_log_probability_l at line 40
Total time: 6.00636 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    40                                           @profile
    41                                           def neg_log_probability_l(alpha,pcs,K,M):
    42                                               """ Negative logarithm of the dirichlet probability 
    43                                               
    44                                               alpha - vector of dirichlet alpha parameters
    45                                               pcs - list of pseudocounts, each corresponding to a sequence
    46                                               K - Number of seuquences in the cluster
    47                                               M - Total number of kmers for each contig
    48                                               """
    49        83         4983     60.0      0.1      A = np.sum(alpha)
    50                                               return -(K*gammaln(A) - 
    51        83         4866     58.6      0.1               np.sum(gammaln(A + M)) + 
    52        83      5996508  72247.1     99.8               np.sum(np.sum(gammaln(pcs+alpha),axis=0) - K*gammaln(alpha)))

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: _all_pseudo_counts at line 53
Total time: 2.23313 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    53                                           @profile
    54                                           def _all_pseudo_counts(dna_l, kmer_hash_count):
    55         1         8045   8045.0      0.4      pcs = np.zeros((len(dna_l),kmer_hash_count))
    56       133          559      4.2      0.0      for index,seq in enumerate(dna_l):
    57       132      2187514  16572.1     98.0          pcs[index,:] = np.fromiter(seq.pseudo_counts, np.dtype('u4'), count=kmer_hash_count)
    58         1        37006  37006.0      1.7      alpha_0 = sophisticated_alpha0(pcs,kmer_hash_count)
    59                                               # np.sum(pcs,axis=0)
    60         1            2      2.0      0.0      return alpha_0,pcs

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: log_probability at line 62
Total time: 0.046681 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           @profile
    63                                           def log_probability(seq,alpha,pseudo_counts_supplied = False):
    64        29          224      7.7      0.5      N = np.shape(alpha)[0]
    65        29           55      1.9      0.1      if pseudo_counts_supplied:
    66        29           55      1.9      0.1          pc_mat = seq.pseudo_counts_array
    67                                               else:
    68                                                   pc_arr = np.fromiter(seq.pseudo_counts,np.dtype('u4'),count=N)
    69                                                   pc_mat = pc_arr.reshape((1,N))
    70        29         2239     77.2      4.8      M = np.sum(pc_mat,axis=1)
    71        29        44108   1521.0     94.5      return - neg_log_probability_l(alpha,pc_mat,1,M)

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: log_probability_test at line 73
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    73                                           @profile
    74                                           def log_probability_test(pseudo_counts,alpha):
    75                                               # pseudo_counts given directly mainly for testing purposes
    76                                               pcs = np.zeros((1,len(pseudo_counts)))
    77                                               pcs[0,:] = np.array(pseudo_counts)
    78                                               return - neg_log_probability_l(alpha,pcs)

