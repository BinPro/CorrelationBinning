Timer unit: 1e-06 s

File: ./score_dirichlet_one_call.py
Function: main at line 16
Total time: 22.6634 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def main(contigs_file,taxonomy_file, dir_path, kmer_length, contig_length):
    18                                           
    19         1            5      5.0      0.0      groups = []
    20         1        76637  76637.0      0.3      DNA.generate_kmer_hash(kmer_length)
    21                                           
    22         1        27534  27534.0      0.1      contigs = read_contigs_file(contigs_file,start_position=True)
    23                                               
    24                                               # Divide genomes into groups, one for each genus
    25         1           38     38.0      0.0      meta_genomes = genome_info_from_parsed_taxonomy_file(taxonomy_file)
    26                                           
    27                                               # Fetch sequence for each genome
    28         1        74926  74926.0      0.3      genomes = read_FASTA_files_no_groups(meta_genomes, dir_path)
    29                                           
    30         1            3      3.0      0.0      genome_part_l = 10000
    31         2            5      2.5      0.0      for genome in genomes:
    32         1      2079694 2079694.0      9.2          genome.calculate_signature()
    33         1         9740   9740.0      0.0          genome.parts = genome.split_seq(genome_part_l)
    34       133          524      3.9      0.0          for part in genome.parts:
    35       132      3878491  29382.5     17.1              part.calculate_signature()
    36         1            4      4.0      0.0          alpha_fit =  model.fit_nonzero_parameters_full_output(\
    37         1     15053130 15053130.0     66.4              genome.parts)
    38         1         1990   1990.0      0.0          sys.stderr.write(str(alpha_fit)+'\n')
    39         1            5      5.0      0.0          genome.pseudo_par = alpha_fit[0]
    40                                           
    41         1            3      3.0      0.0      scores = []
    42        30           75      2.5      0.0      for contig in contigs:
    43        29       908525  31328.4      4.0          contig.calculate_signature()
    44        58          221      3.8      0.0          for genome in genomes:
    45        29          101      3.5      0.0              p_val = model.log_probability(\
    46        29       550635  18987.4      2.4                  contig, genome.pseudo_par)
    47        29           91      3.1      0.0              scores.append(\
    48        29          551     19.0      0.0                  Score(p_val, contig, genome, contig.contig_id))
    49                                           
    50         1           32     32.0      0.0      sys.stdout.write("p_value\tcontig_family\tcontig_genus\tcontig_species\tcontig_genome\tcompare_family\tcompare_genus\tcompare_species\tcompare_genome\tcontig_id" + os.linesep)
    51        30           81      2.7      0.0      for score in scores:
    52        29          350     12.1      0.0          sys.stdout.write(str(score) + '\n')

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: fit_nonzero_parameters at line 8
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           @profile
     9                                           def fit_nonzero_parameters(dna_l):
    10                                               return np.array(fit_nonzero_parameters_full_output(dna_l)[0])

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: fit_nonzero_parameters_full_output at line 11
Total time: 15.0524 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def fit_nonzero_parameters_full_output(dna_l):
    13         1            3      3.0      0.0      kmer_hash_count = dna_l[0].kmer_hash_count
    14         1      2309815 2309815.0     15.3      alpha0, pcs = _all_pseudo_counts(dna_l,kmer_hash_count)
    15                                               # K is the number of sequences in the cluster
    16         1            9      9.0      0.0      K,_ = np.shape(pcs)
    17                                               # Total number of kmers for each contig
    18         1         1723   1723.0      0.0      M = np.sum(pcs,axis=1)
    19         1         1205   1205.0      0.0      sys.stderr.write("alpha0: " + str(alpha0) + '\n')
    20         1           38     38.0      0.0      alpha_bounds = [(0.0,None)]*kmer_hash_count
    21         1     12739557 12739557.0     84.6      alpha_fit = fmin_l_bfgs_b(neg_log_probability_l,alpha0,fprime=neg_log_probability_l_gradient,args=(pcs,K,M),bounds=alpha_bounds,factr=10.0)
    22         1            3      3.0      0.0      return alpha_fit

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: sophisticated_alpha0 at line 23
Total time: 0.035978 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                           @profile
    24                                           def sophisticated_alpha0(pcs,kmer_hash_count):
    25                                               """Estimating the alpha parameters according to a equation given in Minka2012"""
    26         1         1830   1830.0      5.1      norms = np.sum(pcs,axis=1)
    27         1           90     90.0      0.3      sys.stderr.write("Norms: " + str(np.shape(norms)) + '\n')
    28         1        13410  13410.0     37.3      pcs_norm = pcs / norms.reshape(-1,1)
    29         1           62     62.0      0.2      sys.stderr.write("pcss_norm: " + str(np.shape(pcs_norm))+ '\n')
    30         1         2271   2271.0      6.3      p_expected = np.mean(pcs_norm, axis=0)
    31         1           34     34.0      0.1      sys.stderr.write("length of p_expected: " + str(len(p_expected))+'\n')
    32         1            7      7.0      0.0      sys.stderr.write("kmer_hash_count: " + str(kmer_hash_count)+'\n')
    33         1        15498  15498.0     43.1      p_var = np.var(pcs_norm, axis=0)
    34                                               # The sum of the alphas correspond to the precision of the dirichlet, and is therefore 
    35                                               # what makes a difference between the multinomial and the dirichlet-multinomial.
    36         1          716    716.0      2.0      log_alpha_sum = (1/float(kmer_hash_count-1))*(np.sum(np.log(p_expected*(1-p_expected)/p_var -1))-np.log(p_expected[-1]*(1-p_expected[-1])/p_var[-1] - 1))
    37         1         2060   2060.0      5.7      return np.sum(pcs,axis=0)/np.exp(log_alpha_sum)

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: neg_log_probability_l_gradient at line 39
Total time: 6.59994 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                           @profile
    40                                           def neg_log_probability_l_gradient(alpha,pcs,K,M):
    41        54         1596     29.6      0.0      A = np.sum(alpha)
    42        54      6598343 122191.5    100.0      return -(K*psi(A) - np.sum(psi(A+M)) - K*psi(alpha) + np.sum(psi(pcs+alpha),axis=0))

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: neg_log_probability_l at line 44
Total time: 5.94201 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    44                                           @profile
    45                                           def neg_log_probability_l(alpha,pcs,K,M):
    46        83         4819     58.1      0.1      A = np.sum(alpha)
    47                                               return -(K*gammaln(A) - 
    48        83         4882     58.8      0.1               np.sum(gammaln(A + M)) + 
    49        83      5932306  71473.6     99.8               np.sum(np.sum(gammaln(pcs+alpha),axis=0) - K*gammaln(alpha)))

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: _all_pseudo_counts at line 50
Total time: 2.30916 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    50                                           @profile
    51                                           def _all_pseudo_counts(dna_l, kmer_hash_count):
    52         1         7716   7716.0      0.3      pcs = np.zeros((len(dna_l),kmer_hash_count))
    53       133          417      3.1      0.0      for index,seq in enumerate(dna_l):
    54       132      2264225  17153.2     98.1          pcs[index,:] = np.fromiter(seq.pseudo_counts, np.dtype('u4'), count=kmer_hash_count)
    55         1        36802  36802.0      1.6      alpha_0 = sophisticated_alpha0(pcs,kmer_hash_count)
    56                                               # np.sum(pcs,axis=0)
    57         1            3      3.0      0.0      return alpha_0,pcs

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: log_probability at line 58
Total time: 0.549754 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    58                                           @profile
    59                                           def log_probability(seq,alpha):
    60        29          252      8.7      0.0      N = np.shape(alpha)[0]
    61        29       503248  17353.4     91.5      pc_arr = np.fromiter(seq.pseudo_counts,np.dtype('u4'),count=N)
    62        29          325     11.2      0.1      pc_mat = pc_arr.reshape((1,N))
    63                                               # K is the number of sequences in the cluster
    64        29          154      5.3      0.0      K,_ = np.shape(pc_mat)
    65                                               # Total number of kmers for each contig
    66        29         2131     73.5      0.4      M = np.sum(pc_mat,axis=1)
    67        29        43644   1505.0      7.9      return - neg_log_probability_l(alpha,pc_mat,K,M)

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: log_probability_test at line 68
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def log_probability_test(pseudo_counts,alpha):
    70                                               # pseudo_counts given directly mainly for testing purposes
    71                                               pcs = np.zeros((1,len(pseudo_counts)))
    72                                               pcs[0,:] = np.array(pseudo_counts)
    73                                               return - neg_log_probability_l(alpha,pcs)

