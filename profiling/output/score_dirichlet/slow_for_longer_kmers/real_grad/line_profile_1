Timer unit: 1e-06 s

File: ./score_dirichlet_one_call.py
Function: main at line 16
Total time: 3.91391 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def main(contigs_file,taxonomy_file, dir_path, kmer_length, contig_length):
    18                                           
    19         1            5      5.0      0.0      groups = []
    20         1          237    237.0      0.0      DNA.generate_kmer_hash(kmer_length)
    21                                           
    22         1        27177  27177.0      0.7      contigs = read_contigs_file(contigs_file,start_position=True)
    23                                               
    24                                               # Divide genomes into groups, one for each genus
    25         1           43     43.0      0.0      meta_genomes = genome_info_from_parsed_taxonomy_file(taxonomy_file)
    26                                           
    27                                               # Fetch sequence for each genome
    28         1        75928  75928.0      1.9      genomes = read_FASTA_files_no_groups(meta_genomes, dir_path)
    29                                           
    30         1            4      4.0      0.0      genome_part_l = 10000
    31         2            5      2.5      0.0      for genome in genomes:
    32         1      1683886 1683886.0     43.0          genome.calculate_signature()
    33         1         9989   9989.0      0.3          genome.parts = genome.split_seq(genome_part_l)
    34       133          347      2.6      0.0          for part in genome.parts:
    35       132      1702443  12897.3     43.5              part.calculate_signature()
    36         1            4      4.0      0.0          alpha_fit =  model.fit_nonzero_parameters_full_output(\
    37         1        24640  24640.0      0.6              genome.parts)
    38         1         4985   4985.0      0.1          sys.stderr.write(str(alpha_fit)+'\n')
    39         1            3      3.0      0.0          genome.pseudo_par = alpha_fit[0]
    40                                           
    41         1            2      2.0      0.0      scores = []
    42        30           67      2.2      0.0      for contig in contigs:
    43        29       375777  12957.8      9.6          contig.calculate_signature()
    44        58          153      2.6      0.0          for genome in genomes:
    45        29           64      2.2      0.0              p_val = model.log_probability(\
    46        29         7322    252.5      0.2                  contig, genome.pseudo_par)
    47        29           78      2.7      0.0              scores.append(\
    48        29          321     11.1      0.0                  Score(p_val, contig, genome, contig.contig_id))
    49                                           
    50         1           22     22.0      0.0      sys.stdout.write("p_value\tcontig_family\tcontig_genus\tcontig_species\tcontig_genome\tcompare_family\tcompare_genus\tcompare_species\tcompare_genome\tcontig_id" + os.linesep)
    51        30           74      2.5      0.0      for score in scores:
    52        29          338     11.7      0.0          sys.stdout.write(str(score) + '\n')

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: fit_nonzero_parameters at line 8
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           @profile
     9                                           def fit_nonzero_parameters(dna_l):
    10                                               return np.array(fit_nonzero_parameters_full_output(dna_l)[0])

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: fit_nonzero_parameters_full_output at line 11
Total time: 0.024594 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def fit_nonzero_parameters_full_output(dna_l):
    13         1            3      3.0      0.0      kmer_hash_count = dna_l[0].kmer_hash_count
    14         1        10774  10774.0     43.8      alpha0, pcs = _all_pseudo_counts(dna_l,kmer_hash_count)
    15         1           32     32.0      0.1      alpha0 /= np.sum(alpha0)
    16                                               # K is the number of sequences in the cluster
    17         1            9      9.0      0.0      K,_ = np.shape(pcs)
    18                                               # Total number of kmers for each contig
    19         1           28     28.0      0.1      M = np.sum(pcs,axis=1)
    20         1         2967   2967.0     12.1      sys.stderr.write("alpha0: " + str(alpha0) + '\n')
    21         1            4      4.0      0.0      alpha_bounds = [(0.0,None)]*kmer_hash_count
    22         1        10774  10774.0     43.8      alpha_fit = fmin_l_bfgs_b(neg_log_probability_l,alpha0,fprime=neg_log_probability_l_gradient,args=(pcs,K,M),bounds=alpha_bounds)
    23         1            3      3.0      0.0      return alpha_fit

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: neg_log_probability_l_gradient at line 25
Total time: 0.004508 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    25                                           @profile
    26                                           def neg_log_probability_l_gradient(alpha,pcs,K,M):
    27        10          160     16.0      3.5      A = np.sum(alpha)
    28        10         4348    434.8     96.5      return -(K*psi(A) - np.sum(psi(A+M)) - K*psi(alpha) + np.sum(psi(pcs+alpha),axis=0))

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: neg_log_probability_l at line 30
Total time: 0.007993 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    30                                           @profile
    31                                           def neg_log_probability_l(alpha,pcs,K,M):
    32        39          683     17.5      8.5      A = np.sum(alpha)
    33                                               return -(K*gammaln(A) - 
    34        39         1376     35.3     17.2               np.sum(gammaln(A + M)) + 
    35        39         5934    152.2     74.2               np.sum(np.sum(gammaln(pcs+alpha),axis=0) - K*gammaln(alpha)))

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: _all_pseudo_counts at line 36
Total time: 0.010237 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    36                                           @profile
    37                                           def _all_pseudo_counts(dna_l, kmer_hash_count):
    38         1           30     30.0      0.3      pcs = np.zeros((len(dna_l),kmer_hash_count))
    39       133          296      2.2      2.9      for index,seq in enumerate(dna_l):
    40       132         9838     74.5     96.1          pcs[index,:] = np.fromiter(seq.pseudo_counts, np.dtype('u4'), count=kmer_hash_count)
    41         1           71     71.0      0.7      alpha_0 = np.sum(pcs,axis=0)
    42         1            2      2.0      0.0      return alpha_0,pcs

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: log_probability at line 43
Total time: 0.006677 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    43                                           @profile
    44                                           def log_probability(seq,alpha):
    45        29          125      4.3      1.9      N = np.shape(alpha)[0]
    46        29         2053     70.8     30.7      pc_arr = np.fromiter(seq.pseudo_counts,np.dtype('u4'),count=N)
    47        29          138      4.8      2.1      pc_mat = pc_arr.reshape((1,N))
    48                                               # K is the number of sequences in the cluster
    49        29          114      3.9      1.7      K,_ = np.shape(pc_mat)
    50                                               # Total number of kmers for each contig
    51        29          593     20.4      8.9      M = np.sum(pc_mat,axis=1)
    52        29         3654    126.0     54.7      return - neg_log_probability_l(alpha,pc_mat,K,M)

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: log_probability_test at line 53
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    53                                           @profile
    54                                           def log_probability_test(pseudo_counts,alpha):
    55                                               # pseudo_counts given directly mainly for testing purposes
    56                                               pcs = np.zeros((1,len(pseudo_counts)))
    57                                               pcs[0,:] = np.array(pseudo_counts)
    58                                               return - neg_log_probability_l(alpha,pcs)

