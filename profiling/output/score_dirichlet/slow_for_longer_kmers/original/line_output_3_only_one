Timer unit: 1e-06 s

File: ./score_dirichlet_one_call.py
Function: main at line 16
Total time: 4.13814 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def main(contigs_file,taxonomy_file, dir_path, kmer_length, contig_length):
    18                                           
    19         1            5      5.0      0.0      groups = []
    20         1          240    240.0      0.0      DNA.generate_kmer_hash(kmer_length)
    21                                           
    22         1        26997  26997.0      0.7      contigs = read_contigs_file(contigs_file,start_position=True)
    23                                               
    24                                               # Divide genomes into groups, one for each genus
    25         1           43     43.0      0.0      meta_genomes = genome_info_from_parsed_taxonomy_file(taxonomy_file)
    26                                           
    27                                               # Fetch sequence for each genome
    28         1        75859  75859.0      1.8      genomes = read_FASTA_files_no_groups(meta_genomes, dir_path)
    29                                           
    30         1            4      4.0      0.0      genome_part_l = 10000
    31         2            5      2.5      0.0      for genome in genomes:
    32         1      1686523 1686523.0     40.8          genome.calculate_signature()
    33         1        10051  10051.0      0.2          genome.parts = genome.split_seq(genome_part_l)
    34       133          344      2.6      0.0          for part in genome.parts:
    35       132      1683773  12755.9     40.7              part.calculate_signature()
    36         1            4      4.0      0.0          alpha_fit =  model.fit_nonzero_parameters_full_output(\
    37         1       267234 267234.0      6.5              genome.parts)
    38         1         4800   4800.0      0.1          sys.stderr.write(str(alpha_fit)+'\n')
    39         1            4      4.0      0.0          genome.pseudo_par = alpha_fit[0]
    40                                           
    41         1            2      2.0      0.0      scores = []
    42        30           67      2.2      0.0      for contig in contigs:
    43        29       373813  12890.1      9.0          contig.calculate_signature()
    44        58          156      2.7      0.0          for genome in genomes:
    45        29           69      2.4      0.0              p_val = model.log_probability(\
    46        29         7293    251.5      0.2                  contig, genome.pseudo_par)
    47        29           79      2.7      0.0              scores.append(\
    48        29          329     11.3      0.0                  Score(p_val, contig, genome, contig.contig_id))
    49                                           
    50         1           21     21.0      0.0      sys.stdout.write("p_value\tcontig_family\tcontig_genus\tcontig_species\tcontig_genome\tcompare_family\tcompare_genus\tcompare_species\tcompare_genome\tcontig_id" + os.linesep)
    51        30           71      2.4      0.0      for score in scores:
    52        29          355     12.2      0.0          sys.stdout.write(str(score) + '\n')

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: fit_nonzero_parameters at line 8
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           @profile
     9                                           def fit_nonzero_parameters(dna_l):
    10                                               return np.array(fit_nonzero_parameters_full_output(dna_l)[0])

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: fit_nonzero_parameters_full_output at line 11
Total time: 0.267195 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def fit_nonzero_parameters_full_output(dna_l):
    13         1            3      3.0      0.0      kmer_hash_count = dna_l[0].kmer_hash_count
    14         1        10721  10721.0      4.0      alpha0, pcs = _all_pseudo_counts(dna_l,kmer_hash_count)
    15         1         3035   3035.0      1.1      sys.stderr.write("alpha0: " + str(alpha0) + '\n')
    16         1            4      4.0      0.0      alpha_bounds = [(0.0,None)]*kmer_hash_count
    17         1       253430 253430.0     94.8      alpha_fit = fmin_l_bfgs_b(neg_log_probability_l,alpha0,args=(pcs,),bounds=alpha_bounds, approx_grad=True, epsilon=1e-12)
    18         1            2      2.0      0.0      return alpha_fit

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: neg_log_probability_l at line 19
Total time: 0.241256 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                           @profile
    20                                           def neg_log_probability_l(alpha,pcs):
    21       539         9000     16.7      3.7      A = np.sum(alpha)
    22                                           
    23                                               # N is the number of sequences in the sample
    24       539         2333      4.3      1.0      N,_ = np.shape(pcs) # Different meaning than before
    25                                           
    26                                               # Total number of kmers for each contig
    27       539        12126     22.5      5.0      M = np.sum(pcs,axis=1)
    28                                           
    29                                               return -(N*gammaln(A) - 
    30       539        20781     38.6      8.6               np.sum(gammaln(A + M)) + 
    31       539       197016    365.5     81.7               np.sum(np.sum(gammaln(pcs+alpha),axis=0) - N*gammaln(alpha)))

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: _all_pseudo_counts at line 32
Total time: 0.010194 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                           @profile
    33                                           def _all_pseudo_counts(dna_l, kmer_hash_count):
    34         1           30     30.0      0.3      pcs = np.zeros((len(dna_l),kmer_hash_count))
    35       133          310      2.3      3.0      for index,seq in enumerate(dna_l):
    36       132         9775     74.1     95.9          pcs[index,:] = np.fromiter(seq.pseudo_counts, np.dtype('u4'), count=kmer_hash_count)
    37         1           77     77.0      0.8      alpha_0 = np.sum(pcs,axis=0)
    38         1            2      2.0      0.0      return alpha_0,pcs

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: log_probability at line 39
Total time: 0.006804 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                           @profile
    40                                           def log_probability(seq,alpha):
    41        29          125      4.3      1.8      N = np.shape(alpha)[0]
    42        29         2085     71.9     30.6      pc_arr = np.fromiter(seq.pseudo_counts,np.dtype('u4'),count=N)
    43        29          150      5.2      2.2      pc_mat = pc_arr.reshape((1,N))
    44        29         4444    153.2     65.3      return - neg_log_probability_l(alpha,pc_mat)

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: log_probability_test at line 45
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    45                                           @profile
    46                                           def log_probability_test(pseudo_counts,alpha):
    47                                               # pseudo_counts given directly mainly for testing purposes
    48                                               pcs = np.zeros((1,len(pseudo_counts)))
    49                                               pcs[0,:] = np.array(pseudo_counts)
    50                                               return - neg_log_probability_l(alpha,pcs)

