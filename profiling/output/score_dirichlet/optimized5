Timer unit: 1e-06 s

File: ./score_contigs_dirichlet.py
Function: main at line 14
Total time: 114.825 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    14                                           @profile
    15                                           def main(contigs_file,taxonomy_file, dir_path, kmer_length, contig_length):
    16                                           
    17         1            5      5.0      0.0      groups = []
    18         1          238    238.0      0.0      DNA.generate_kmer_hash(kmer_length)
    19                                           
    20         1        27828  27828.0      0.0      contigs = read_contigs_file(contigs_file,start_position=True)
    21                                               
    22                                               # Divide genomes into groups, one for each genus
    23         1           93     93.0      0.0      meta_genomes = genome_info_from_parsed_taxonomy_file(taxonomy_file)
    24                                           
    25                                               # Fetch sequence for each genome
    26         1      1043916 1043916.0      0.9      genomes = read_FASTA_files_no_groups(meta_genomes, dir_path)
    27                                           
    28         1            4      4.0      0.0      genome_part_l = 100000
    29         8           31      3.9      0.0      for genome in genomes:
    30         7     22360128 3194304.0     19.5          genome.calculate_signature()
    31         7       123455  17636.4      0.1          genome.parts = genome.split_seq(genome_part_l)
    32       189          760      4.0      0.0          for part in genome.parts:
    33       182     22477115 123500.6     19.6              part.calculate_signature()
    34         7           27      3.9      0.0          genome.pseudo_par = model.fit_nonzero_parameters(\
    35         7           21      3.0      0.0              genome.parts,
    36         7      7330979 1047282.7      6.4              DNA.kmer_hash_count)
    37                                           
    38         1            3      3.0      0.0      scores = []
    39        30           81      2.7      0.0      for contig in contigs:
    40        29       372459  12843.4      0.3          contig.calculate_signature()
    41       232          642      2.8      0.0          for genome in genomes:
    42       203          613      3.0      0.0              if contig.id == genome.id:
    43        29          166      5.7      0.0                  s = int(contig.start_position)
    44        29           86      3.0      0.0                  start_part_index = s/genome_part_l
    45        29           78      2.7      0.0                  end_part_index = (s+contig_length)/genome_part_l
    46        29           71      2.4      0.0                  if start_part_index == end_part_index:
    47        28           67      2.4      0.0                      i = start_part_index
    48        28           73      2.6      0.0                      temp_pseudo_par = model.fit_nonzero_parameters(\
    49        28          170      6.1      0.0                          genome.parts[0:i]+genome.parts[i+1:], 
    50        28     60041889 2144353.2     52.3                          DNA.kmer_hash_count)
    51                                                           else:
    52         1            3      3.0      0.0                      i1 = start_part_index
    53         1            2      2.0      0.0                      i2 = end_part_index
    54         1            3      3.0      0.0                      temp_pseudo_par = model.fit_nonzero_parameters(\
    55         1            6      6.0      0.0                          genome.parts[0:i1]+genome.parts[i2+1:],
    56         1      1007376 1007376.0      0.9                          DNA.kmer_hash_count)
    57                                           
    58        29          129      4.4      0.0                  p_val = model.log_probability(\
    59        29         4295    148.1      0.0                      contig, temp_pseudo_par)
    60                                                       else:
    61       174          500      2.9      0.0                  p_val = model.log_probability(\
    62       174        25506    146.6      0.0                      contig, genome.pseudo_par)
    63       203          663      3.3      0.0              scores.append(\
    64       203         2406     11.9      0.0                  Score(p_val, contig, genome, contig.contig_id))
    65                                           
    66         1           21     21.0      0.0      sys.stdout.write("p_value\tcontig_family\tcontig_genus\tcontig_species\tcontig_genome\tcompare_family\tcompare_genus\tcompare_species\tcompare_genome\tcontig_id" + os.linesep)
    67       204          568      2.8      0.0      for score in scores:
    68       203         2417     11.9      0.0          sys.stdout.write(str(score) + '\n')

