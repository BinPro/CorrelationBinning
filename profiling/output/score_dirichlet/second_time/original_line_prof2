Timer unit: 1e-06 s

File: ./score_contigs_dirichlet.py
Function: main at line 16
Total time: 53.1725 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           
    17                                           def main(contigs_file,taxonomy_file, dir_path, kmer_length, contig_length):
    18                                           
    19         1            5      5.0      0.0      groups = []
    20         1          235    235.0      0.0      DNA.generate_kmer_hash(kmer_length)
    21                                           
    22         1        27705  27705.0      0.1      contigs = read_contigs_file(contigs_file,start_position=True)
    23                                               
    24                                               # Divide genomes into groups, one for each genus
    25         1           90     90.0      0.0      meta_genomes = genome_info_from_parsed_taxonomy_file(taxonomy_file)
    26                                           
    27                                               # Fetch sequence for each genome
    28         1      1018771 1018771.0      1.9      genomes = read_FASTA_files_no_groups(meta_genomes, dir_path)
    29                                           
    30         1            3      3.0      0.0      genome_part_l = 10000
    31         8           58      7.2      0.0      for genome in genomes:
    32         7     23132399 3304628.4     43.5          genome.calculate_signature()
    33         7       142117  20302.4      0.3          genome.parts = genome.split_seq(genome_part_l)
    34      1795         6324      3.5      0.0          for part in genome.parts:
    35      1788     23589868  13193.4     44.4              part.calculate_signature()
    36         7           24      3.4      0.0          genome.pseudo_par = model.fit_nonzero_parameters(\
    37         7           21      3.0      0.0              genome.parts,
    38         7      1158509 165501.3      2.2              DNA.kmer_hash_count)
    39                                           
    40         1            2      2.0      0.0      scores = []
    41        30           83      2.8      0.0      for contig in contigs:
    42        29       381903  13169.1      0.7          contig.calculate_signature()
    43       232          634      2.7      0.0          for genome in genomes:
    44       203          632      3.1      0.0              if contig.id == genome.id:
    45        29          158      5.4      0.0                  s = int(contig.start_position)
    46        29           88      3.0      0.0                  start_part_index = s/genome_part_l
    47        29           79      2.7      0.0                  end_part_index = (s+contig_length)/genome_part_l
    48        29           75      2.6      0.0                  if start_part_index == end_part_index:
    49                                                               i = start_part_index
    50                                                               temp_pseudo_par = model.fit_nonzero_parameters(\
    51                                                                   genome.parts[0:i]+genome.parts[i+1:], 
    52                                                                   DNA.kmer_hash_count)
    53                                                           else:
    54        29           66      2.3      0.0                      i1 = start_part_index
    55        29           63      2.2      0.0                      i2 = end_part_index
    56        29           69      2.4      0.0                      temp_pseudo_par = model.fit_nonzero_parameters(\
    57        29          346     11.9      0.0                          genome.parts[0:i1]+genome.parts[i2+1:],
    58        29      3654800 126027.6      6.9                          DNA.kmer_hash_count)
    59                                           
    60        29           95      3.3      0.0                  p_val = model.log_probability(\
    61        29         7839    270.3      0.0                      contig, temp_pseudo_par)
    62                                                       else:
    63       174          442      2.5      0.0                  p_val = model.log_probability(\
    64       174        43233    248.5      0.1                      contig, genome.pseudo_par)
    65       203          609      3.0      0.0              scores.append(\
    66       203         2458     12.1      0.0                  Score(p_val, contig, genome, contig.contig_id))
    67                                           
    68         1           30     30.0      0.0      sys.stdout.write("p_value\tcontig_family\tcontig_genus\tcontig_species\tcontig_genome\tcompare_family\tcompare_genus\tcompare_species\tcompare_genome\tcontig_id" + os.linesep)
    69       204          529      2.6      0.0      for score in scores:
    70       203         2164     10.7      0.0          sys.stdout.write(str(score) + '\n')

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: fit_nonzero_parameters at line 7
Total time: 4.81258 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def fit_nonzero_parameters(dna_l,kmer_hash_count):
     9        36      4812579 133682.8    100.0      return np.array(fit_nonzero_parameters_full_output(dna_l,kmer_hash_count)[0])

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: fit_nonzero_parameters_full_output at line 10
Total time: 4.81144 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           def fit_nonzero_parameters_full_output(dna_l,kmer_hash_count):
    12        36       763080  21196.7     15.9      alpha0, pcs = _all_pseudo_counts(dna_l,kmer_hash_count)
    13        36          170      4.7      0.0      alpha_bounds = [(0.0,None)]*kmer_hash_count
    14        36      4048102 112447.3     84.1      alpha_fit = fmin_l_bfgs_b(neg_log_probability_l,alpha0,args=(pcs,),bounds=alpha_bounds, approx_grad=True, epsilon=1e-12)
    15        36           89      2.5      0.0      return alpha_fit

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: neg_log_probability_l at line 16
Total time: 3.83298 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def neg_log_probability_l(alpha,pcs):
    18      7105       118560     16.7      3.1      A = np.sum(alpha)
    19                                           
    20                                               # N is the number of sequences in the sample
    21      7105        30982      4.4      0.8      N,_ = np.shape(pcs) # Different meaning than before
    22                                           
    23                                               # Total number of kmers for each contig
    24      7105       175999     24.8      4.6      M = np.sum(pcs,axis=1)
    25                                           
    26                                               return -(N*gammaln(A) - 
    27      7105       296393     41.7      7.7               np.sum(gammaln(A + M)) + 
    28      7105      3211048    451.9     83.8               np.sum(np.sum(gammaln(pcs+alpha),axis=0) - N*gammaln(alpha)))

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: _all_pseudo_counts at line 29
Total time: 0.722865 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    29                                           @profile
    30                                           def _all_pseudo_counts(dna_l, kmer_hash_count):
    31        36          945     26.2      0.1      pcs = np.zeros((len(dna_l),kmer_hash_count))
    32      9902        21664      2.2      3.0      for index,seq in enumerate(dna_l):
    33      9866       697872     70.7     96.5          pcs[index,:] = np.fromiter(seq.pseudo_counts, np.dtype('u4'), count=kmer_hash_count)
    34        36         2298     63.8      0.3      alpha_0 = np.sum(pcs,axis=0)
    35        36           86      2.4      0.0      return alpha_0,pcs

File: /home/johannes/.virtualenvs/probin2.7/local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/dirichlet.py
Function: log_probability at line 36
Total time: 0.047571 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    36                                           @profile
    37                                           def log_probability(seq,alpha):
    38       203          903      4.4      1.9      N = np.shape(alpha)[0]
    39       203        14559     71.7     30.6      pc_arr = np.fromiter(seq.pseudo_counts,np.dtype('u4'),count=N)
    40       203          949      4.7      2.0      pc_mat = pc_arr.reshape((1,N))
    41       203        31160    153.5     65.5      return - neg_log_probability_l(alpha,pc_mat)

