Timer unit: 1e-06 s

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: cluster at line 7
Total time: 31.895 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def cluster(contigs, model, cluster_count ,centroids=None, max_iter=100, repeat=10):
     9         2            7      3.5      0.0      (max_clustering_prob,max_centroids,max_clusters) = (-np.inf,None,None)
    10         2            3      1.5      0.0      if repeat != 1:
    11         1            8      8.0      0.0          (max_clustering_prob,max_centroids,max_clusters) = cluster(contigs, model, cluster_count ,centroids=None, max_iter=max_iter, repeat=repeat-1)
    12         2            2      1.0      0.0      if centroids is None:
    13         2     11918197 5959098.5     37.4         centroids = _generate_kplusplus(contigs,model,cluster_count,DNA.kmer_hash_count)
    14         2            4      2.0      0.0      clustering_prob = -np.inf
    15         2            3      1.5      0.0      cluster_different = True
    16                                               
    17         8           14      1.8      0.0      while (cluster_different and max_iter != 0):
    18                                           
    19         6     14259918 2376653.0     44.7          clusters = _expectation(contigs,model,centroids)
    20                                           
    21         6      4357036 726172.7     13.7          centroids = _maximization(contigs, model, clusters, centroids.shape)
    22                                                   
    23         6      1359699 226616.5      4.3          curr_clustering_prob = _evaluate_clustering(centroids, clusters, model)
    24                                                   
    25         6           25      4.2      0.0          if (curr_clustering_prob <= clustering_prob):
    26                                                       cluster_different = False
    27                                                       if (curr_clustering_prob < clustering_prob):
    28                                                           print>>sys.stderr, "Clustering got worse, previous clustering probability : {0}, current clustering probability: {1}".format( clustering_prob, curr_clustering_prob)
    29         6           11      1.8      0.0          clustering_prob = curr_clustering_prob
    30         6           12      2.0      0.0          max_iter -= 1
    31         2           14      7.0      0.0      (curr_max_clust_prob, curr_max_centr, curr_max_clust) = max([(max_clustering_prob, max_centroids, max_clusters), (clustering_prob, centroids, clusters)],key=lambda x: x[0])
    32         2            2      1.0      0.0      return (curr_max_clust_prob, curr_max_centr, curr_max_clust)

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _expectation at line 33
Total time: 14.2301 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    33                                           @profile
    34                                           def _expectation(contigs, model, centroids):
    35        48          108      2.2      0.0      clusters = [set() for _ in xrange(len(centroids))]
    36      1800         2471      1.4      0.0      for contig in contigs:
    37     14352     14134991    984.9     99.3          prob = [model.log_probability(contig.signature,centroid) for centroid in centroids]
    38      1794        85972     47.9      0.6          clust_ind = np.argmax(prob)
    39      1794         6532      3.6      0.0          clusters[clust_ind].add(contig)
    40         6            7      1.2      0.0      return clusters

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _maximization at line 41
Total time: 4.35362 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    41                                           @profile    
    42                                           def _maximization(contigs, model, clusters, centroids_shape):
    43         6          109     18.2      0.0      new_centroids = np.zeros(centroids_shape)
    44        48           96      2.0      0.0      for clust_ind ,clust in enumerate(clusters):
    45        42           50      1.2      0.0          if not clust:
    46                                                       select_as_centroid = np.random.randint(0,len(contigs))
    47                                                       new_centroid = model.fit_nonzero_parameters(contigs[select_as_centroid].signature,DNA.kmer_hash_count)
    48                                                   else:
    49        42         1210     28.8      0.0              new_centroid_count = Counter()
    50      1836      3876862   2111.6     89.0              [new_centroid_count.update(contig.signature) for contig in clust]
    51        42       474791  11304.5     10.9              new_centroid = model.fit_nonzero_parameters(new_centroid_count,DNA.kmer_hash_count)
    52        42          495     11.8      0.0          new_centroids[clust_ind,:] = new_centroid
    53         6            4      0.7      0.0      return new_centroids

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _generate_centroids at line 54
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    54                                           @profile
    55                                           def _generate_centroids(c_count,c_dim):
    56                                               centroids = np.random.rand(c_count,c_dim)
    57                                               centroids /= np.sum(centroids,axis=1,keepdims=True)
    58                                               return centroids

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _generate_kplusplus at line 59
Total time: 11.8854 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    59                                           @profile
    60                                           def _generate_kplusplus(contigs,model,c_count,c_dim):
    61         2           14      7.0      0.0      contigs_ind = range(len(contigs))
    62         2           30     15.0      0.0      centroids = np.zeros((c_count,c_dim))
    63         2            9      4.5      0.0      contig_ind = np.random.randint(0,len(contigs_ind))
    64         2            9      4.5      0.0      contigs_ind.remove(contig_ind)
    65         2        13038   6519.0      0.1      centroids[0,:] = model.fit_nonzero_parameters(contigs[contig_ind].signature,DNA.kmer_hash_count)
    66        14           20      1.4      0.0      for centroids_index in xrange(1,c_count):
    67        12          166     13.8      0.0          prob = {}
    68      3558         4569      1.3      0.0          for contig_ind in contigs_ind:
    69     15922     11745974    737.7     98.8              sum_prob = sum([model.log_probability(contigs[contig_ind].signature,centroid) for centroid in centroids[:centroids_index]])
    70      3546        18398      5.2      0.2              prob[np.random.random()*sum_prob] = contig_ind
    71        12          387     32.2      0.0          furthest = min(prob)
    72        12           28      2.3      0.0          contig = contigs[prob[furthest]]
    73        12           60      5.0      0.0          contigs_ind.remove(prob[furthest])
    74        12       102682   8556.8      0.9          centroids[centroids_index,:] = model.fit_nonzero_parameters(contig.signature,DNA.kmer_hash_count)
    75         2            2      1.0      0.0      return centroids

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/binning/kmeans.py
Function: _evaluate_clustering at line 76
Total time: 1.35788 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    76                                           @profile
    77                                           def _evaluate_clustering(centroids,clusters, model):
    78         6            4      0.7      0.0      cluster_prob = 0
    79        48           78      1.6      0.0      for i,cluster in enumerate(clusters):
    80      1836      1357792    739.5    100.0          cluster_prob += sum([model.log_probability(contig.signature,centroids[i]) for contig in cluster])
    81         6            4      0.7      0.0      return cluster_prob

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/multinomial.py
Function: fit_parameters at line 5
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           @profile
     6                                           def fit_parameters(sig):
     7                                               par = {}
     8                                               n = sum(sig.values())
     9                                               for i,v in sig.items():
    10                                                   par[i] = v/float(n)
    11                                               return par

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/multinomial.py
Function: fit_nonzero_parameters at line 12
Total time: 0.398484 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                           @profile
    13                                           def fit_nonzero_parameters(sig,kmer_hash_count):
    14        56         1574     28.1      0.4      pseudo_sig = np.ones(kmer_hash_count)
    15    105977        93569      0.9     23.5      for key,cnt in sig.iteritems():
    16    105921       299317      2.8     75.1          pseudo_sig[key] += cnt
    17        56         3955     70.6      1.0      pseudo_sig /= np.sum(pseudo_sig)
    18        56           69      1.2      0.0      return pseudo_sig

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/multinomial.py
Function: log_probability at line 19
Total time: 26.8095 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                           @profile
    20                                           def log_probability(signature, prob_vector):
    21     26728       206946      7.7      0.8      signature_vector = np.zeros(np.shape(prob_vector))
    22                                           
    23                                           #    for key,value in signature.iteritems():
    24                                           #        signature_vector[key] = value
    25     26728     15604498    583.8     58.2      signature_vector[signature.keys()] = signature.values()
    26                                           
    27     26728     10998022    411.5     41.0      return np.sum((signature_vector * np.log(prob_vector)) - _log_fac(signature_vector)) + _log_fac(np.sum(signature_vector))

File: /home/binni/.local/lib/python2.7/site-packages/probin-0.1-py2.7.egg/probin/model/composition/multinomial.py
Function: _log_fac at line 28
Total time: 5.19749 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    28                                           @profile
    29                                           def _log_fac(i):
    30                                               # gammaln produces the natural logarithm of the factorial of i-1
    31     53456      5197488     97.2    100.0      return gammaln(i+1)

