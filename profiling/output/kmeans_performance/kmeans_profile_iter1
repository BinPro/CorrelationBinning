Timer unit: 1e-06 s

File: /home/binni/MasterProject/ProBin/src/probin/binning/kmeans.py
Function: _clustering at line 9
Total time: 2.35122 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           @profile
    10                                           def _clustering(cluster_count, max_iter, run, epsilon, verbose, log_probabilities_func, fit_nonzero_parameters_func, centroids, **kwargs):
    11         4            8      2.0      0.0      contigs = kwargs["composition"]
    12         4           86     21.5      0.0      rs = np.random.RandomState(seed=randint(0,10000)+getpid())    
    13         4          104     26.0      0.0      if not np.any(centroids):
    14                                                   #centroids = _generate_centroids(contigs,cluster_count, DNA.kmer_hash_count,rs)
    15         4       660967 165241.8     28.1          centroids = _generate_kplusplus(contigs, log_probabilities_func,fit_nonzero_parameters_func,cluster_count,DNA.kmer_hash_count,rs)
    16                                                  
    17         4            7      1.8      0.0      prev_prob = -np.inf
    18         4            4      1.0      0.0      prob_diff = np.inf
    19         4            4      1.0      0.0      iteration = 0
    20                                           
    21        33          111      3.4      0.0      while (prob_diff >= epsilon and max_iter-iteration > 0):
    22                                           
    23        29       992340  34218.6     42.2          cluster_ind = _expectation(contigs, log_probabilities_func, centroids, **kwargs)
    24                                           
    25        29        32278   1113.0      1.4          centroids = _maximization(contigs, fit_nonzero_parameters_func, cluster_ind, centroids, rs)
    26                                                   
    27        29       664773  22923.2     28.3          curr_prob = _evaluate_clustering(contigs, log_probabilities_func, cluster_ind, centroids)
    28        29           61      2.1      0.0          prob_diff = curr_prob - prev_prob 
    29        29           32      1.1      0.0          (curr_prob,prev_prob) = (prev_prob,curr_prob)
    30        29           31      1.1      0.0          iteration += 1
    31                                               #Change back so curr_prob represents the highest probability
    32         4            6      1.5      0.0      (curr_prob,prev_prob) = (prev_prob,curr_prob)
    33         4            8      2.0      0.0      if prob_diff < 0:
    34                                                   print>>sys.stderr, "Kmeans got worse, diff: {0}".format(prob_diff)
    35         4          130     32.5      0.0      print >> sys.stderr, "Kmeans iterations: {0}".format(iteration)
    36        32          262      8.2      0.0      clusters = [kwargs["ids"][cluster_ind==i] for i in xrange(len(centroids))]
    37         4            6      1.5      0.0      return (clusters, curr_prob, centroids)

File: /home/binni/MasterProject/ProBin/src/probin/binning/kmeans.py
Function: _expectation at line 38
Total time: 0.992002 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    38                                           @profile
    39                                           def _expectation(contigs, log_probabilities_func, centroids, **kwargs):
    40        29       991567  34192.0    100.0      prob = log_probabilities_func(contigs,centroids)
    41        29          407     14.0      0.0      cluster_ind = np.argmax(prob,axis=1)
    42        29           28      1.0      0.0      return cluster_ind

File: /home/binni/MasterProject/ProBin/src/probin/binning/kmeans.py
Function: _maximization at line 43
Total time: 0.031161 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    43                                           @profile
    44                                           def _maximization(contigs, fit_nonzero_parameters_func, cluster_ind, centroids,rs):
    45        29          143      4.9      0.5      centroids[:] = 0
    46       232          242      1.0      0.8      for i in xrange(len(centroids)):
    47                                                   #indexes is boolean np.array 
    48       203         1054      5.2      3.4          indexes = cluster_ind==i
    49       203         1858      9.2      6.0          if not indexes.any():
    50                                                       select_as_centroid = rs.randint(0,len(contigs))
    51                                                       new_centroid = fit_nonzero_parameters_func([contigs[select_as_centroid]])
    52                                                       print>>sys.stderr,"cluster {0} was empty in kmeans".format(i)
    53                                                   else:
    54       203        27362    134.8     87.8              new_centroid = fit_nonzero_parameters_func(contigs[indexes])
    55       203          483      2.4      1.6          centroids[i] = new_centroid
    56        29           19      0.7      0.1      return centroids

File: /home/binni/MasterProject/ProBin/src/probin/binning/kmeans.py
Function: _generate_centroids at line 57
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    57                                           @profile
    58                                           def _generate_centroids(c_count,c_dim,rs):
    59                                               
    60                                               centroids = rs.rand(c_count,c_dim)
    61                                               centroids /= np.sum(centroids,axis=1,keepdims=True)
    62                                               return centroids

File: /home/binni/MasterProject/ProBin/src/probin/binning/kmeans.py
Function: _generate_kplusplus at line 63
Total time: 0.660744 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    63                                           @profile
    64                                           def _generate_kplusplus(contigs, log_probabilities_func,fit_nonzero_parameters_func,c_count,c_dim,rs):
    65         4           81     20.2      0.0      contigs_ind = np.ones(len(contigs)) == 1
    66         4           15      3.8      0.0      centroids = np.zeros((c_count,c_dim))
    67         4           16      4.0      0.0      contig_ind = rs.randint(0,len(contigs_ind))
    68         4            8      2.0      0.0      contigs_ind[contig_ind] = False
    69         4          301     75.2      0.0      centroids[0] = fit_nonzero_parameters_func(contigs[contig_ind].reshape(1,-1))
    70        28           40      1.4      0.0      for centroids_index in xrange(1,c_count):
    71        24       658099  27420.8     99.6          prob = np.sum(log_probabilities_func(contigs[contigs_ind],centroids[:centroids_index]),axis=1,keepdims=True)
    72        24          508     21.2      0.1          furthest = np.argmin(prob * np.random.random(prob.shape))
    73        24           71      3.0      0.0          contigs_ind[furthest] = False
    74        24         1602     66.8      0.2          centroids[centroids_index] = fit_nonzero_parameters_func(contigs[furthest].reshape(1,-1))
    75         4            3      0.8      0.0      return centroids

File: /home/binni/MasterProject/ProBin/src/probin/binning/kmeans.py
Function: _evaluate_clustering at line 76
Total time: 0.664175 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    76                                           @profile
    77                                           def _evaluate_clustering(contigs,log_probabilities_func, cluster_ind, centroids):
    78        29           23      0.8      0.0      cluster_prob = 0
    79       232          258      1.1      0.0      for i in xrange(len(centroids)):
    80       203       663874   3270.3    100.0          cluster_prob += np.sum(log_probabilities_func(contigs[cluster_ind==i],centroids[i]))
    81        29           20      0.7      0.0      return cluster_prob

File: /home/binni/MasterProject/ProBin/src/probin/model/composition/multinomial.py
Function: fit_parameters at line 7
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def fit_parameters(dna_l):
     9                                               sig = Counter()
    10                                               [sig.update(part.signature) for part in dna_l]
    11                                               par = np.zeros(dna_l[0].kmer_hash_count)
    12                                               for key,cnt in sig.iteritems():
    13                                                   par[key] += cnt
    14                                               par /= np.sum(par)
    15                                               return par

File: /home/binni/MasterProject/ProBin/src/probin/model/composition/multinomial.py
Function: fit_nonzero_parameters at line 16
Total time: 0.011161 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def fit_nonzero_parameters(composition,expected_clustering=None):
    18       231          295      1.3      2.6      if expected_clustering == None:
    19       231         1972      8.5     17.7          expected_clustering = np.ones((len(composition),1))
    20       231         3634     15.7     32.6      pseudo_sig = (expected_clustering.T).dot(composition) + 1
    21       231         4458     19.3     39.9      pseudo_sig /= np.sum(pseudo_sig,axis=1,keepdims=True)
    22       231          282      1.2      2.5      if len(pseudo_sig) == 1:
    23       231          349      1.5      3.1          pseudo_sig = pseudo_sig[0]
    24       231          171      0.7      1.5      return pseudo_sig

File: /home/binni/MasterProject/ProBin/src/probin/model/composition/multinomial.py
Function: log_probability at line 25
Total time: 0 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    25                                           @profile
    26                                           def log_probability(seq, prob_vector):
    27                                               signature_vector = np.zeros(np.shape(prob_vector))
    28                                           
    29                                               for key,value in seq.signature.iteritems():
    30                                                   signature_vector[key] = value
    31                                           
    32                                               return np.sum((signature_vector * np.log(prob_vector)) - _log_fac(signature_vector)) + _log_fac(np.sum(signature_vector))

File: /home/binni/MasterProject/ProBin/src/probin/model/composition/multinomial.py
Function: log_probabilities at line 33
Total time: 2.2411 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    33                                           @profile
    34                                           def log_probabilities(composition, prob_vectors):
    35       256          406      1.6      0.0      if len(prob_vectors.shape) == 1:
    36       203         4389     21.6      0.2          prob_vectors = np.array([prob_vectors])    
    37       256          782      3.1      0.0      log_qs = np.zeros((len(composition),len(prob_vectors)))
    38     24690        36178      1.5      1.6      for i,sign in enumerate(composition):
    39     24434      2199157     90.0     98.1          log_qs[i] = np.sum((sign * np.log(prob_vectors)) - _log_fac(sign),axis=1) + _log_fac(np.sum(sign))
    40       256          184      0.7      0.0      return log_qs

File: /home/binni/MasterProject/ProBin/src/probin/model/composition/multinomial.py
Function: _log_fac at line 42
Total time: 0.519208 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                           @profile
    43                                           def _log_fac(i):
    44                                               # gammaln produces the natural logarithm of the factorial of i-1
    45     48868       519208     10.6    100.0      return gammaln(i+1)

